using System;
using Foundation;
using MobileConnectSdk;
using ObjCRuntime;

namespace MobileConnectSdk.iOS.Bindings
{
	// @protocol ReaderUpdateDelegate
	[BaseType(typeof(NSObject)), Model (AutoGeneratedName = true)]
	interface AccessDelegate
	{
		// @required -(void)onAccessStartedWithReader:(Reader * _Nonnull)reader;
		[Abstract]
		[Export ("onAccessStartedWithReader:")]
		void OnAccessStartedWithReader (Reader reader);

		// @required -(void)onAccessCompletedWithReader:(Reader * _Nonnull)reader result:(AccessResult * _Nullable)result error:(NSError * _Nullable)error;
		[Abstract]
		[Export ("onAccessCompletedWithReader:result:error:")]
		void OnAccessCompletedWithReader (Reader reader, [NullAllowed] AccessResult result, [NullAllowed] NSError error);
	}

	// @interface AccessResult : NSObject
	[BaseType (typeof(NSObject))]
	[DisableDefaultCtor]
	interface AccessResult
	{
		// @property (readonly, nonatomic) enum AccessDecision accessDecision;
		[Export ("accessDecision")]
		AccessDecision AccessDecision { get; }

		// @property (readonly, nonatomic) enum AccessMode accessMode;
		[Export ("accessMode")]
		AccessMode AccessMode { get; }

		// -(BOOL)isAccessGranted __attribute__((warn_unused_result("")));
		[Export ("isAccessGranted")]
		bool IsAccessGranted { get; }
	}

	// @interface GallagherMobileAccessError : NSObject
	[BaseType(typeof(NSObject))]
	interface GallagherMobileAccessError
	{
		// @property (readonly, copy, nonatomic, class) NSString * _Nonnull domain;
		[Static]
		[Export("domain")]
		string Domain { get; }

		// @property (readonly, nonatomic, class) NSInteger registrationErrorNetworkFailure;
		[Static]
		[Export("registrationErrorNetworkFailure")]
		nint RegistrationErrorNetworkFailure { get; }

		// @property (readonly, nonatomic, class) NSInteger registrationErrorInvalidResponse;
		[Static]
		[Export("registrationErrorInvalidResponse")]
		nint RegistrationErrorInvalidResponse { get; }

		// @property (readonly, nonatomic, class) NSInteger registrationErrorUserCancelled;
		[Static]
		[Export("registrationErrorUserCancelled")]
		nint RegistrationErrorUserCancelled { get; }

		// @property (readonly, nonatomic, class) NSInteger registrationErrorInvitationGone;
		[Static]
		[Export("registrationErrorInvitationGone")]
		nint RegistrationErrorInvitationGone { get; }

		// @property (readonly, nonatomic, class) NSInteger registrationErrorInvitationNotFound;
		[Static]
		[Export("registrationErrorInvitationNotFound")]
		nint RegistrationErrorInvitationNotFound { get; }

		// @property (readonly, nonatomic, class) NSInteger registrationErrorDevicePasscodeNotSet;
		[Static]
		[Export("registrationErrorDevicePasscodeNotSet")]
		nint RegistrationErrorDevicePasscodeNotSet { get; }

		// @property (readonly, nonatomic, class) NSInteger registrationErrorDeviceNotSupported;
		[Static]
		[Export("registrationErrorDeviceNotSupported")]
		nint RegistrationErrorDeviceNotSupported { get; }

		// @property (readonly, nonatomic, class) NSInteger registrationErrorUnexpected;
		[Static]
		[Export("registrationErrorUnexpected")]
		nint RegistrationErrorUnexpected { get; }

		// @property (readonly, nonatomic, class) NSInteger readerConnectionErrorForbidden;
		[Static]
		[Export ("readerConnectionErrorForbidden")]
		nint ReaderConnectionErrorForbidden { get; }

		// @property (readonly, nonatomic, class) NSInteger readerConnectionErrorUnavailable;
		[Static]
		[Export ("readerConnectionErrorUnavailable")]
		nint ReaderConnectionErrorUnavailable { get; }

		// @property (readonly, nonatomic, class) NSInteger readerConnectionErrorTransactionInProgress;
		[Static]
		[Export ("readerConnectionErrorTransactionInProgress")]
		nint ReaderConnectionErrorTransactionInProgress { get; }

		// @property (readonly, nonatomic, class) NSInteger readerConnectionErrorBluetoothDisabled;
		[Static]
		[Export ("readerConnectionErrorBluetoothDisabled")]
		nint ReaderConnectionErrorBluetoothDisabled { get; }

		// @property (readonly, nonatomic, class) NSInteger readerConnectionErrorUserCancelled;
		[Static]
		[Export ("readerConnectionErrorUserCancelled")]
		nint ReaderConnectionErrorUserCancelled { get; }

		// @property (readonly, nonatomic, class) NSInteger readerConnectionErrorRemoteClose;
		[Static]
		[Export ("readerConnectionErrorRemoteClose")]
		nint ReaderConnectionErrorRemoteClose { get; }

		// @property (readonly, nonatomic, class) NSInteger readerConnectionErrorSecondFactorRequired;
		[Static]
		[Export ("readerConnectionErrorSecondFactorRequired")]
		nint ReaderConnectionErrorSecondFactorRequired { get; }

		// @property (readonly, nonatomic, class) NSInteger readerConnectionErrorOpenAppRequired;
		[Static]
		[Export ("readerConnectionErrorOpenAppRequired")]
		nint ReaderConnectionErrorOpenAppRequired { get; }

		// @property (readonly, nonatomic, class) NSInteger readerConnectionErrorInvalidatedCredential;
		[Static]
		[Export ("readerConnectionErrorInvalidatedCredential")]
		nint ReaderConnectionErrorInvalidatedCredential { get; }

		// @property (readonly, nonatomic, class) NSInteger readerConnectionErrorBiometricsLockedOut;
		[Static]
		[Export ("readerConnectionErrorBiometricsLockedOut")]
		nint ReaderConnectionErrorBiometricsLockedOut { get; }

		// @property (readonly, nonatomic, class) NSInteger readerConnectionErrorUnexpected;
		[Static]
		[Export ("readerConnectionErrorUnexpected")]
		nint ReaderConnectionErrorUnexpected { get; }
	}

	// @interface MobileAccess : NSObject
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface MobileAccess
	{
		// -(void)registerCredentialWithUrl:(NSURL * _Nonnull)url delegate:(id<RegistrationDelegate> _Nonnull)delegate;
		[Export("registerCredentialWithUrl:delegate:")]
		void RegisterCredentialWithUrl(NSUrl url, RegistrationDelegate @delegate);

		// @property (readonly, copy, nonatomic) NSArray<MobileCredential *> * _Nonnull mobileCredentials;
		[Export("mobileCredentials", ArgumentSemantic.Copy)]
		MobileCredential[] MobileCredentials { get; }

		// -(NSArray<MobileCredential *> * _Nonnull)getMobileCredentials:(enum MobileCredentialFilter)options __attribute__((warn_unused_result("")));
		[Export ("getMobileCredentials:")]
		MobileCredential[] GetMobileCredentials (MobileCredentialFilter options);

		// -(MobileCredential * _Nullable)getMobileCredentialWithId:(NSString * _Nonnull)credentialId __attribute__((warn_unused_result("")));
		[Export ("getMobileCredentialWithId:")]
		[return: NullAllowed]
		MobileCredential GetMobileCredentialWithId (string credentialId);

		// -(void)deleteMobileCredential:(MobileCredential * _Nonnull)mobileCredential deleteOption:(enum DeleteOption)deleteOption onCredentialDeleteCompleted:(void (^ _Nonnull)(MobileCredential * _Nonnull, NSError * _Nullable))onCredentialDeleteCompleted;
		[Export ("deleteMobileCredential:deleteOption:onCredentialDeleteCompleted:")]
		void DeleteMobileCredential (MobileCredential mobileCredential, DeleteOption deleteOption, Action<MobileCredential, NSError> onCredentialDeleteCompleted);

		// -(void)setScanning:(BOOL)enabled;
		[Export ("setScanning:")]
		void SetScanning (bool enabled);

		// -(NSURL * _Nullable)resolveInvitationUrl:(NSString * _Nonnull)rawUrl invitation:(NSString * _Nonnull)invitation __attribute__((warn_unused_result("")));
		[Export ("resolveInvitationUrl:invitation:")]
		[return: NullAllowed]
		NSUrl ResolveInvitationUrl (string rawUrl, string invitation);

		// -(void)addSdkStateDelegate:(id<SdkStateDelegate> _Nonnull)delegate;
		[Export ("addSdkStateDelegate:")]
		void AddSdkStateDelegate (SdkStateDelegate @delegate);

		// -(void)removeSdkStateDelegate:(id<SdkStateDelegate> _Nonnull)delegate;
		[Export ("removeSdkStateDelegate:")]
		void RemoveSdkStateDelegate (SdkStateDelegate @delegate);

		// -(void)addReaderUpdateDelegate:(id<ReaderUpdateDelegate> _Nonnull)delegate;
		[Export ("addReaderUpdateDelegate:")]
		void AddReaderUpdateDelegate (ReaderUpdateDelegate @delegate);

		// -(void)removeReaderUpdateDelegate:(id<ReaderUpdateDelegate> _Nonnull)delegate;
		[Export ("removeReaderUpdateDelegate:")]
		void RemoveReaderUpdateDelegate (ReaderUpdateDelegate @delegate);

		// -(void)addAutomaticAccessDelegate:(id<ReaderUpdateDelegate> _Nonnull)delegate;
		[Export ("addAutomaticAccessDelegate:")]
		void AddAutomaticAccessDelegate (AccessDelegate @delegate);

		// -(void)removeAutomaticAccessDelegate:(id<ReaderUpdateDelegate> _Nonnull)delegate;
		[Export ("removeAutomaticAccessDelegate:")]
		void RemoveAutomaticAccessDelegate (AccessDelegate @delegate);

		// @property (nonatomic) BOOL isAutomaticAccessEnabled;
		[Export ("isAutomaticAccessEnabled")]
		bool IsAutomaticAccessEnabled { get; set; }

		// @property (nonatomic) enum BackgroundScanningMode backgroundScanningMode;
		[Export ("backgroundScanningMode", ArgumentSemantic.Assign)]
		BackgroundScanningMode BackgroundScanningMode { get; set; }

		// @property (readonly, nonatomic, strong) NSArray * _Nonnull states;
		[Export ("states", ArgumentSemantic.Strong)]
		NSObject[] States { get; }
	}

	// @interface MobileAccessLocalization : NSObject
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface MobileAccessLocalization
	{
		// @property (readonly, copy, nonatomic) TitleAndBody * _Nonnull (^ _Nonnull)(Reader * _Nonnull) notificationDetails;
		[Export("notificationDetails", ArgumentSemantic.Copy)]
		Func<Reader, TitleAndBody> NotificationDetails { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull) registrationDetails;
		[Export("registrationDetails", ArgumentSemantic.Copy)]
		Func<NSString, NSString> RegistrationDetails { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nonnull (^ _Nonnull)(NSString * _Nonnull) authenticationDetails;
		[Export("authenticationDetails", ArgumentSemantic.Copy)]
		Func<NSString, NSString> AuthenticationDetails { get; }

		// -(instancetype _Nonnull)initWithNotificationDetails:(TitleAndBody * _Nonnull (^ _Nullable)(Reader * _Nonnull))notificationDetails registrationDetails:(NSString * _Nonnull (^ _Nullable)(NSString * _Nonnull))registrationDetails authenticationDetails:(NSString * _Nonnull (^ _Nullable)(NSString * _Nonnull))authenticationDetails __attribute__((objc_designated_initializer));
		[Export("initWithNotificationDetails:registrationDetails:authenticationDetails:")]
		[DesignatedInitializer]
		IntPtr Constructor([NullAllowed] Func<Reader, TitleAndBody> notificationDetails, [NullAllowed] Func<NSString, NSString> registrationDetails, [NullAllowed] Func<NSString, NSString> authenticationDetails);
	}

	// @interface MobileAccessProvider : NSObject
	[BaseType(typeof(NSObject))]
	interface MobileAccessProvider
	{
		// +(MobileAccess * _Nonnull)configureWithDatabaseFilePath:(NSURL * _Nullable)databaseFilePath localization:(MobileAccessLocalization * _Nullable)localization cloudTlsValidationMode:(enum CloudTlsValidationMode)cloudTlsValidationMode enabledFeatures:(MCSdkFeature)enabledFeatures __attribute__((warn_unused_result("")));
		[Static]
		[Export("configureWithDatabaseFilePath:localization:cloudTlsValidationMode:enabledFeatures:")]
		MobileAccess ConfigureWithDatabaseFilePath([NullAllowed] NSUrl databaseFilePath, [NullAllowed] MobileAccessLocalization localization, CloudTlsValidationMode cloudTlsValidationMode, MCSdkFeature enabledFeatures);
	}

	// @interface MobileCredential : NSObject
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface MobileCredential
	{
		// @property (readonly, copy, nonatomic) NSString * _Nonnull id;
		[Export("id")]
		string Id { get; }

		// @property (readonly, nonatomic) NSInteger facilityId;
		[Export("facilityId")]
		nint FacilityId { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nonnull facilityName;
		[Export("facilityName")]
		string FacilityName { get; }

		// @property (readonly, copy, nonatomic) NSDate * _Nonnull registeredDate;
		[Export("registeredDate", ArgumentSemantic.Copy)]
		NSDate RegisteredDate { get; }

		// @property (readonly, nonatomic) BOOL isSingleFactor;
		[Export("isSingleFactor")]
		bool IsSingleFactor { get; }

		// @property (readonly, copy, nonatomic) NSURL * _Nonnull sessionUrl;
		[Export("sessionUrl", ArgumentSemantic.Copy)]
		NSUrl SessionUrl { get; }

		// @property (readonly, nonatomic) BOOL isRevoked;
		[Export("isRevoked")]
		bool IsRevoked { get; }
	}

	// @interface Reader : NSObject
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface Reader
	{
		// @property (readonly, copy, nonatomic) NSUUID * _Nonnull id;
		[Export("id", ArgumentSemantic.Copy)]
		NSUuid Id { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nonnull name;
		[Export("name")]
		string Name { get; }

		// -(instancetype _Nonnull)initWithId:(NSUUID * _Nonnull)id name:(NSString * _Nonnull)name __attribute__((objc_designated_initializer));
		[Export("initWithId:name:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSUuid id, string name);
	}

	// @interface ReaderAttributes : Reader
	[BaseType(typeof(Reader))]
	interface ReaderAttributes
	{
		// @property (readonly, nonatomic) double measuredPathLoss;
		[Export("measuredPathLoss")]
		double MeasuredPathLoss { get; }

		// @property (readonly, nonatomic) enum ReaderDistance distance;
		[Export("distance")]
		ReaderDistance Distance { get; }

		// @property (readonly, nonatomic) double autoConnectPathLoss;
		[Export("autoConnectPathLoss")]
		double AutoConnectPathLoss { get; }

		// @property (readonly, nonatomic) double manualConnectPathLoss;
		[Export("manualConnectPathLoss")]
		double ManualConnectPathLoss { get; }

		// @property (readonly, nonatomic) BOOL isBleManualConnectEnabled;
		[Export("isBleManualConnectEnabled")]
		bool IsBleManualConnectEnabled { get; }

		// @property (readonly, nonatomic) BOOL isBleAutoConnectEnabled;
		[Export("isBleAutoConnectEnabled")]
		bool IsBleAutoConnectEnabled { get; }

		// @property (readonly, nonatomic) BOOL isSecondFactorRequired;
		[Export("isSecondFactorRequired")]
		bool IsSecondFactorRequired { get; }

		// @property (readonly, nonatomic) BOOL isBleActionsEnabled;
		[Export("isBleActionsEnabled")]
		bool IsBleActionsEnabled { get; }

		// -(instancetype _Nonnull)initWithId:(NSUUID * _Nonnull)id name:(NSString * _Nonnull)name measuredPathLoss:(double)measuredPathLoss distance:(enum ReaderDistance)distance autoConnectPathLoss:(double)autoConnectPathLoss manualConnectPathLoss:(double)manualConnectPathLoss isBleManualConnectEnabled:(BOOL)isBleManualConnectEnabled isBleAutoConnectEnabled:(BOOL)isBleAutoConnectEnabled isSecondFactorRequired:(BOOL)isSecondFactorRequired isBleActionsEnabled:(BOOL)isBleActionsEnabled __attribute__((objc_designated_initializer));
		[Export("initWithId:name:measuredPathLoss:distance:autoConnectPathLoss:manualConnectPathLoss:isBleManualConnectEnabled:isBleAutoConnectEnabled:isSecondFactorRequired:isBleActionsEnabled:")]
		[DesignatedInitializer]
		IntPtr Constructor(NSUuid id, string name, double measuredPathLoss, ReaderDistance distance, double autoConnectPathLoss, double manualConnectPathLoss, bool isBleManualConnectEnabled, bool isBleAutoConnectEnabled, bool isSecondFactorRequired, bool isBleActionsEnabled);
	}

	// @protocol ReaderUpdateDelegate
	[BaseType(typeof(NSObject)), Model (AutoGeneratedName = true)]
	interface ReaderUpdateDelegate
	{
		// @required -(void)onReaderUpdated:(ReaderAttributes * _Nonnull)reader updateType:(enum ReaderUpdateTime)updateType;
		[Abstract]
		[Export ("onReaderUpdated:updateType:")]
		void UpdateType (ReaderAttributes reader, ReaderUpdateType updateType);
	}

	// @protocol RegistrationDelegate
	[BaseType(typeof(NSObject)), Model(AutoGeneratedName = true)]
	interface RegistrationDelegate
	{
		// @required -(void)onRegistrationCompletedWithCredential:(MobileCredential * _Nullable)credential error:(NSError * _Nullable)error;
		[Abstract]
		[Export("onRegistrationCompletedWithCredential:error:")]
		void OnRegistrationCompletedWithCredential([NullAllowed] MobileCredential credential, [NullAllowed] NSError error);

		// @required -(void)onAuthenticationTypeSelectionRequestedWithSelector:(void (^ _Nonnull)(BOOL, enum SecondFactorAuthenticationType))selector;
		[Abstract]
		[Export ("onAuthenticationTypeSelectionRequested:")]
		void OnAuthenticationTypeSelectionRequested (Action<bool, SecondFactorAuthenticationType> selector);
	}

	// @protocol SdkStateDelegate
	[BaseType(typeof(NSObject)), Model (AutoGeneratedName = true)]
	interface SdkStateDelegate
	{
		// @required -(void)onStateChangeWithIsScanning:(BOOL)isScanning states:(NSArray * _Nonnull)states;
		[Abstract]
		[Export ("onStateChangeWithIsScanning:states:")]
		void States (bool isScanning, NSObject[] states);
	}

	// @interface TitleAndBody : NSObject
	[BaseType(typeof(NSObject))]
	[DisableDefaultCtor]
	interface TitleAndBody
	{
		// @property (readonly, copy, nonatomic) NSString * _Nonnull title;
		[Export("title")]
		string Title { get; }

		// @property (readonly, copy, nonatomic) NSString * _Nonnull body;
		[Export("body")]
		string Body { get; }
	}
}
